nodeSelector:
  role: ci-cd

serviceAccount:
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::350206045032:role/ArgoCDRole"

config:
  applicationsAPIKind: "kubernetes"
#  argocd:
#    # -- Use the gRPC-web protocol to connect to the Argo CD API
#    grpcWeb: true
#    # -- Connect to the Argo CD API server at server address
#    serverAddress: "argo-cd-argocd-server-grpc"
#    # -- If specified, the certificate of the Argo CD API server is not verified.
#    insecure: true #
#    # -- If specified, use an unencrypted HTTP connection to the Argo CD API instead of TLS.
#    plaintext: true
#    # -- If specified, the secret with Argo CD API key will be created.
#    token: ""
  registries:
    - api_url: https://350206045032.dkr.ecr.us-east-1.amazonaws.com
      prefix: 350206045032.dkr.ecr.us-east-1.amazonaws.com
      name: ECR
      ping: true
      insecure: false
      default: true
      credentials: ext:/scripts/ecr-login.sh
      credsexpire: 6h

authScripts:
  enabled: true
  scripts:
    ecr-login2.sh: |
      #!/bin/sh
      
      # Set AWS CLI to use the /tmp directory for any temporary storage
      export AWS_CONFIG_FILE=/tmp/aws_config
      export AWS_SHARED_CREDENTIALS_FILE=/tmp/aws_credentials
      
      # Retrieve the authorization token from AWS ECR
      auth_token=$(aws ecr get-authorization-token --region us-east-1 --output text --query 'authorizationData[].authorizationToken')
      
      # Decode the authorization token
      decoded_token=$(echo $auth_token | base64 -d)
      
      # Extract username and password
      username=$(echo $decoded_token | cut -d: -f1)
      password=$(echo $decoded_token | cut -d: -f2)
      
      # Output username and password
      echo "$username:$password"
    ecr-login.sh: |
      #!/bin/sh
      aws ecr --region "us-east-1" get-authorization-token --output text --query 'authorizationData[].authorizationToken' | base64 -d