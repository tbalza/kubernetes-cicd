serviceAccount:
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::350206045032:role/ArgoCDRole"
# init containers or sidecars that configure or bootstrap the main containers based on dynamic inputs from secrets.

crds:
  keep: true # check # Keep CRDs on chart uninstall

global:
  domain: argocd.tbalza.net # Used for ingresses, certificates, SSO, notifications, etc. (blank allows all domains)

configs:
  cm:
    kustomize.buildOptions: "--load-restrictor LoadRestrictionsNone --enable-helm" # Enable Kustomize to install helm charts
  params:
    server.insecure: true # necessary when SSL termination is handled by ALB

server:
#  service:
#    type: ClusterIP
#  containerPorts:
#    server: 8282
#  extraArgs:
#    - --insecure
#  extraEnv:
#    - name: ARGOCD_INSECURE
#      value: "true"
  ingress: # working helm ingress with externalDNS as per https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd # no grpc warning errors
    enabled: true # true
    controller: aws # Specifies that this is managed by AWS ALB
    ingressClassName: alb # (default `alb`) `alb-https` IngressClassParams set in tf dynamically referencing ACM ARN ### redundant with annotation
#    hostname: "argocd.tbalza.net" # references/defaults to global: for domain
    aws:
      serviceType: ClusterIP # <- Used with target-type: ip
      backendProtocolVersion: GRPC # https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd
    annotations:
#      kubernetes.io/ingress.class: "alb" # (default `alb`) `alb-https` IngressClassParams set in tf container ACM ARN ### ingressClassName preferred in k8s 1.18+
      alb.ingress.kubernetes.io/scheme: "internet-facing" # change to "internal" when made private
      alb.ingress.kubernetes.io/backend-protocol: HTTPS # traffic between the ALB and the pods is over HTTP # for grpc HTTPS must be set
      alb.ingress.kubernetes.io/target-type: ip # check. target-type:instance/nodeport. NodePort range (30000-32767)
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]' # '[{"HTTP": 80}]' # '[{"HTTP": 80}, {"HTTPS": 443}]' # HTTPS redirect still works with listener only on HTTPS
      #alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
      alb.ingress.kubernetes.io/ssl-redirect: '443'
      alb.ingress.kubernetes.io/group.name: "argo-cd-cluster"
      alb.ingress.kubernetes.io/group.order: "1"
      external-dns.alpha.kubernetes.io/hostname: argocd.tbalza.net
      ##external-dns.alpha.kubernetes.io/ingress-hostname-source: annotation-only # external-dns controller only creates DNS records for /hostname
      #alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:us-east-1:350206045032:certificate/60dbd336-ad5a-4927-beaf-144b4143af4d" # When certificateArn is specified in the IngressClassParams, the AWS LBC will ignore the certificate ARN specified via annotations
      # https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/ingress/cert_discovery/
      # https://github.com/argoproj/argo-helm/blob/main/charts/argo-cd/README.md
      ###cert-manager.io/cluster-issuer: letsencrypt-prod-django # The name of the ClusterIssuer
      #alb.ingress.kubernetes.io/healthcheck-path: "/healthz"
      #alb.ingress.kubernetes.io/healthcheck-port: "traffic-port" # check
      #alb.ingress.kubernetes.io/success-codes: "200,307" # check # 200,307

#    tls: true
#    tls: # TLS configuration block
#      - hosts:
#          - argocd.tbalza.net
#    path: "/" # /
#    pathType: "Prefix" #"ImplementationSpecific"
#    #hostname: "argocd.tbalza.net" # references global: for domain


applicationSet:
  enabled: true
  nodeSelector:
    role: ci-cd

dex:
  enabled: false # This is for SSO
  server:
    nodeSelector:
      role: ci-cd

notifications:
  controller:
    nodeSelector:
      role: ci-cd

controller:
  nodeSelector:
    role: ci-cd

repoServer:
  nodeSelector:
    role: ci-cd
