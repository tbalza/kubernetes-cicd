controller:
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::350206045032:role/ArgoCDRole" # 350206045032 # `argocd-application-controller` assigned to argocd-secrets-global right now

crds:
  keep: false # check # Keep CRDs on chart uninstall

global:
  domain: argocd.tbalza.net # Used for ingresses, certificates, SSO, notifications, etc. (blank allows all domains) # check if it can be replaced by ingress
#  image:
#    tag: "v2.11.4"
  nodeSelector:
    role: ci-cd

configs: # use `lovely-plugin` for envsubst instead of injecting envsubst w/ busybox? https://github.com/crumbhole/argocd-lovely-plugin
#  cm:
#    kustomize.buildOptions: "--load-restrictor LoadRestrictionsNone --enable-helm" # Enable Kustomize to install helm charts
  params:
    server.insecure: true # necessary when SSL termination is handled by ALB
    applicationsetcontroller.enable.progressive.syncs: true # ApplicationSet compatible with Progressive Syncs. (SyncWave must use app of apps)
    applicationsetcontroller.default.application.progressing.timeout: 600 # when using rollingSync, prevent sync timeout error with kube prometheus stack (default 300 seconds)
  cmp: # argocd cmp "env substitution" plugin. needed since kustomize can't retrieve remote values (env/secrets/configmaps) for its own installation (only for resulting pods etc.)
    create: true
    plugins: # Plugin yaml files to be added to argocd-cmp-cm
      substitution:
        generate:
          command: ["/bin/sh", "-c"] # ["/bin/sh"] # kustomize build --load-restrictor LoadRestrictionsNone --enable-helm --output /tmp | envsubst "$AVAILABLE_VARS"
          args: # --output /tmp
            - |
              AVAILABLE_VARS=$(env | cut -d "=" -f 1 | awk '{print "$"$1}' | tr "\n" " ")
              kustomize build --load-restrictor LoadRestrictionsNone --enable-helm | envsubst "$AVAILABLE_VARS"
        preserveFileMode: true # by default cmp resets file mode
        discover:
          fileName: s*.yaml
        allowConcurrency: true
#  cm: # health assessment needs to be manually added for syncwave to work since 1.8. https://argo-cd.readthedocs.io/en/stable/operator-manual/health/
#    resource.customizations: |
#      argoproj.io/Application:
#        health.lua: |
#          hs = {}
#          hs.status = "Progressing"
#          hs.message = ""
#          if obj.status ~= nil then
#            if obj.status.health ~= nil then
#              hs.status = obj.status.health.status
#              if obj.status.health.message ~= nil then
#                hs.message = obj.status.health.message
#              end
#            end
#          end
#          return hs

server: # kustomize build --load-restrictor LoadRestrictionsNone --enable-helm | envsubst "$AVAILABLE_VARS"
  ingress: # working helm ingress with externalDNS as per https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd # no grpc warning errors
    enabled: false # true
#  readinessProbe:
#    initialDelaySeconds: 60
#  livenessProbe:
#    initialDelaySeconds: 60

applicationSet:
  enabled: true
  nodeSelector:
    role: ci-cd
  serviceAccount: # this serviceAccount would be used by `repocreds`, image updater is set in another values.yaml (inside image-updater)
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::350206045032:role/ArgoCDRole" # `argocd-application-controller` assigned to argocd-secrets-global right now

dex:
  enabled: false # This is for SSO

repoServer:
#  serviceAccount: # this serviceAccount would be used by `repocreds`, image updater is set in another values.yaml (inside image-updater)
###    name: "argocd-repo-server" # argo-cd-argocd-repo-server
#    annotations:
#      eks.amazonaws.com/role-arn: "arn:aws:iam::350206045032:role/ArgoCDrepoRole" # `argocd-application-controller` assigned to argocd-secrets-global right now
  rbac: # check. when restricting, remember restart for deployment argo-cd-argocd-repo-server must be allowed (for the job, that restarts and allows for env to be loaded)
     - apiGroups:
       - "*"
       resources:
       - "*"
       verbs:
       - "*"

#  podLabels: # label used to restart repo server with job
#    app.kubernetes.io/custom: argocd-repo-server # ?

  extraContainers: # all of this is default required installation params for cmp, only the plugin yaml name and envsubst need to be defined as additional mounts
    - name: substitution
      command: [ "/bin/sh", "-c" ]
      envFrom: # this loads all the secrets as ENV variables in the cmp plugin container
        - secretRef:
            name: argocd-secrets-global
            optional: true
#        - configMapRef: # secrets were used to test if it all worked. after determining repo server/redit restart was needed this should work. delete secretRef if successful
#            name: global-variables # pending. check rbac, restrict accordingly
#            optional: true
      args:
        - |
          /var/run/argocd/argocd-cmp-server
      image: tbalza/envsubst:latest # pending replace with generic image, install kustomize, helm, envsubst # quay.io/argoproj/argocd # '{{ default .Values.global.image.repository .Values.repoServer.image.repository }}:{{ default (include "argo-cd.defaultTag" .) .Values.repoServer.image.tag }}'
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        allowPrivilegeEscalation: true
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: substitution.yaml  # Maps the specific config file for this plugin
          name: argocd-cmp-cm
        - mountPath: /tmp
          name: cmp-tmp
##        - mountPath: /usr/local/bin/ # envsubst # /usr/local/bin/envsubst # read only dirs from quay.io/argoproj/argocd using tmp for now
##          name: custom-tools
##          subPath: envsubst

  volumes: # only the shared-bin(envsubst) needs to be defined as additional mount
    - name: argocd-cmp-cm
      configMap:
        name: argocd-cmp-cm
    - name: cmp-tmp # scratch space for any temporary processing
      emptyDir: {}

##    - name: custom-tools # envsubst
##      emptyDir: {}
#  initContainers: # # envsubst
#    - name: get-env
#      envFrom: # this loads all the secrets as ENV variables in the cmp plugin container
#        - secretRef:
#            name: argocd-secrets-global
#            optional: true
#      image: alpine:latest # tbalza/envsubst:latest
#      securityContext:
#        runAsNonRoot: true
#        runAsUser: 999 # required for envsubst to be executed in extra container by correct argocd user
#      command: ["/bin/sh", "-c"] # # /tmp/envsubst # - "cp envsubst /tmp/envsubst && chmod a+x /tmp/envsubst" # && chmod a+x /custom-tools/envsubst
#      args: # PATH=/tmp:$PATH
#        - |
#          wget -qO- https://github.com/a8m/envsubst/releases/download/v1.4.2/envsubst-Linux-x86_64 > /tmp/envsubst
#      volumeMounts:
#        - mountPath: /custom-tools # /tmp # /custom-tools
#          name: custom-tools # custom-tools

redisSecretInit:
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::350206045032:role/ArgoCDRole" # `argocd-application-controller` assigned to argocd-secrets-global right now