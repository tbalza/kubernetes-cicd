# #argocd-image-updater.argoproj.io/write-back-method: git:secret:argocd/argocd-github-app-secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: argocd-secrets # referenced to in deployment.yaml
  namespace: argocd
spec:
  refreshInterval: "0"
  secretStoreRef:
    name: argocd-secrets # must match `SecretStore` name
    kind: SecretStore
  target:
    name: argocd-secrets
    creationPolicy: Owner # Owner # Owner managed by ESO # Merge
    immutable: true # check
  data:
    - secretKey: password # arbitrary assigned key name, used in deployment/application/appset.yaml
      remoteRef:
        key: argo_cd_github_app_token  # The path to SSM parameter ### image updater
        conversionStrategy: Default # argocd appset will loop infinitely if not set
        decodingStrategy: None # argocd appset will loop infinitely if not set
        metadataPolicy: None # argocd appset will loop infinitely if not set
    - secretKey: username # arbitrary assigned key name, used in deployment/application/appset.yaml
      remoteRef:
        key: argo_cd_github_app_user  # The path to SSM parameter ### image updater
        conversionStrategy: Default # argocd appset will loop infinitely if not set
        decodingStrategy: None # argocd appset will loop infinitely if not set
        metadataPolicy: None # argocd appset will loop infinitely if not set
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: argocd-secrets
  namespace: argocd
spec:
  provider:
    aws:
      service: ParameterStore
      region: us-east-1  # AWS region specific, pending dynamic value
      auth:
        jwt: # requires `sts:AssumeRoleWithWebIdentity` permission (set in tf)
          serviceAccountRef:
            name: argocd-image-updater # name of actual serviceAccount (not role) attached to IRSA
            # check which serviceAccount makes the most sense
#---
####################
#### global ########
####################
# #argocd-image-updater.argoproj.io/write-back-method: git:secret:argocd/argocd-github-app-secret
#apiVersion: external-secrets.io/v1beta1
#kind: ExternalSecret
#metadata:
#  name: argocd-secrets-global # referenced to in deployment.yaml
#  namespace: argocd
#spec:
#  refreshInterval: "0"
#  secretStoreRef:
#    name: argocd-secrets-global # must match `SecretStore` name
#    kind: SecretStore
#  target:
#    name: argocd-secrets-global
#    creationPolicy: Owner # Owner # Owner managed by ESO # Merge
#    immutable: true # check
#  data:
#    - secretKey: password # arbitrary assigned key name, used in deployment/application/appset.yaml
#      remoteRef:
#        key: argo_cd_github_app_token  # The path to SSM parameter ### image updater
#        conversionStrategy: Default # argocd appset will loop infinitely if not set
#        decodingStrategy: None # argocd appset will loop infinitely if not set
#        metadataPolicy: None # argocd appset will loop infinitely if not set
#    - secretKey: username # arbitrary assigned key name, used in deployment/application/appset.yaml
#      remoteRef:
#        key: argo_cd_github_app_user  # The path to SSM parameter ### image updater
#        conversionStrategy: Default # argocd appset will loop infinitely if not set
#        decodingStrategy: None # argocd appset will loop infinitely if not set
#        metadataPolicy: None # argocd appset will loop infinitely if not set
#---
#apiVersion: external-secrets.io/v1beta1
#kind: SecretStore
#metadata:
#  name: argocd-secrets-global
#  namespace: argocd
#spec:
#  provider:
#    aws:
#      service: ParameterStore
#      region: us-east-1  # AWS region specific, pending dynamic value
#      auth:
#        jwt: # requires `sts:AssumeRoleWithWebIdentity` permission (set in tf)
#          serviceAccountRef:
#            name: argocd-image-updater # name of actual serviceAccount (not role) attached to IRSA
#            # check which serviceAccount makes the most sense