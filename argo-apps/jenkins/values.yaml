controller:
  nodeSelector:
    role: ci-cd
#  # 'name' is a name of an existing secret in the same namespace as jenkins,
#  # 'keyName' is the name of one of the keys inside the current secret.
#  # the 'name' and 'keyName' are concatenated with a '-' in between, so for example:
#  # an existing secret "secret-credentials" and a key inside it named "github-password" should be used in JCasC as ${secret-credentials-github-password}
#  # 'name' and 'keyName' must be lowercase RFC 1123 label must consist of lower case alphanumeric characters or '-',
#  # and must start and end with an alphanumeric character (e.g. 'my-name', or '123-abc')
#  # existingSecret existing secret "secret-credentials" and a key inside it named "github-username" should be used in JCasC as ${github-username}
#  # When using existingSecret no need to specify the keyName under additionalExistingSecrets.
#  existingSecret:
#
#  # -- List of additional existing secrets to mount
#  additionalExistingSecrets: [ ]
#  # ref: https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/features/secrets.adoc#kubernetes-secrets
#  # additionalExistingSecrets:
#  #  - name: secret-name-1
#  #    keyName: username
#  #  - name: secret-name-1
#  #    keyName: password
#
#  # -- List of additional secrets to create and mount
#  additionalSecrets: [ ]
#  # ref: https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/features/secrets.adoc#kubernetes-secrets
#  # additionalSecrets:
#  #  - name: nameOfSecret
#  #    value: secretText

## https://github.com/jenkinsci/helm-charts/issues/678
#  initScripts:
#    setup-known-hosts: |
#      new File("/var/jenkins_home/.ssh").mkdir()
#      File file = new File("/var/jenkins_home/.ssh/known_hosts")
#      file.write '${known_hosts}'

#  initConfigMap: jenkins-init-scripts (kustomize confimapgenerator references to a .groovy job)
#// init.groovy
#println "Configuring Jenkins during startup..."
#jenkins.model.Jenkins.instance.securityRealm = new hudson.security.LDAPSecurityRealm(...)
#jenkins.model.Jenkins.instance.save()
  probes:
    startupProbe:
      failureThreshold: 12 # -- Set the failure threshold for the startup probe
      periodSeconds: 10 # -- Set the time interval between two startup probes executions in seconds
      timeoutSeconds: 60 # -- Set the timeout for the startup probe in seconds
  sidecars:
    configAutoReload:
      enabled: false # require pod restart for config change. false allows to view current temporary jcasc
#  containerEnv:
#    - name: CASC_JENKINS_CONFIG
#      value: "/var/jenkins_home/"
  image:
    repository: "jenkins/jenkins"
    tag: 2.440.3
  javaOpts: "-Xmx1536m -Xms512m -Dcasc.jenkins.config=/var/jenkins_home/casc_configs -Dorg.csanchez.jenkins.plugins.kubernetes.clients.cacheExpiration=60" # -Dcasc.jenkins.config=/var/jenkins_home/casc_configs prevent memory limit issues, define jcasc config path
  admin:
    username: "admin" # check
    password: "pass" # check
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1"
      memory: "2Gi"
  service:
    port: 8080
  installPlugins:
    - kubernetes:4203.v1dd44f5b_1cf9
    - workflow-aggregator:596.v8c21c963d92d
    - git:5.2.1
    - configuration-as-code:1775.v810dc950b_514
    - ansible:307.va_1f3ef06575a_
    - docker-workflow:580.vc0c340686b_54
    - credentials:1337.v60b_d7b_c7b_c9f
    - job-dsl:1.87
    - amazon-ecr:1.114.vfd22430621f5
  JCasC:
    enabled: true
    defaultConfig: true # `false` required with custom config (conflicting/duplicate definitions crashes jenkins install)
    overwriteConfiguration: true # related to PVC. requires pod restart (or sidecars: configAutoReload: )
    configScripts:
      example-one: |
        jenkins:
          systemMessage: values.yaml custom message.
#      example-two: |
#        jenkins:
#          tool:
#            hello:
#      awssecrets: |
#        unclassified:
#          awsCredentialsProvider:
#            endpointConfiguration:
#              serviceEndpoint: https://secretsmanager.eu-west-1.amazonaws.com
#              signingRegion: eu-west-1

#nameSuffix: -prod
#You cannot use template calls ({{ .SomeValue }} in kustomize

  #jenkinsUrl: "https://jenkins.tbalza.net"

  serviceType: ClusterIP
  ingress: #insecure . "-noCertificateCheck" . http.sslVerify false . If you are using SSL termination on the ALB, with a self-signed certificate, you need also to build a custom inbound-agent base image (see here) with the CA certificate.
    enabled: false
#    #ingressClassName: "alb" # Ingress class name for using AWS ALB
#    annotations:
#      kubernetes.io/ingress.class: "alb"
#      #alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
#      #alb.ingress.kubernetes.io/backend-protocol: "HTTP"
#      alb.ingress.kubernetes.io/scheme: "internet-facing" # "internet-facing"
#      alb.ingress.kubernetes.io/target-type: "ip" # ip
#      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
#      alb.ingress.kubernetes.io/group.name: "argo-cd-cluster"
#      #alb.ingress.kubernetes.io/group.order: "2"
#      #alb.ingress.kubernetes.io/healthcheck-path: "/login"
#      #alb.ingress.kubernetes.io/healthcheck-port: "traffic-port"
#      #alb.ingress.kubernetes.io/success-codes: "200,307"
#      external-dns.alpha.kubernetes.io/hostname: jenkins.tbalza.net
#      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:350206045032:certificate/47561cda-e12f-48cd-a4c5-29a1ca67fcd0


persistence:
  enabled: true #
  storageClass: "gp3"
  size: "9Gi"
  accessMode: "ReadWriteOnce" # RWO can be mounted as read-write by a single node. ReadWriteMany for HA/efs
  #existingClaim: jenkins
  # https://github.com/jenkinsci/helm-charts/issues/659
  # https://github.com/jenkinsci/helm-charts/issues/64
  # ref: https://kubernetes.io/docs/concepts/storage/volume-pvc-datasource/
  # -- Existing data source to clone PVC from
#  dataSource: {}
#  #   name: PVC-NAME
#  #   kind: PersistentVolumeClaim
#
#  # -- SubPath for jenkins-home mount
#  subPath:
#  # -- Additional volumes
#  volumes: []
#  #  - name: nothing
#  #    emptyDir: {}
#
#  # -- Additional mounts
#  mounts: []
#  #  - mountPath: /var/nothing
#  #    name: nothing
#  #    readOnly: true

agent:
  podName: default
  #jenkinsUrl: "https://jenkins.tbalza.net" ##
  workingDir: "/home/jenkins/agent" # default
  nodeUsageMode: "NORMAL" # default
  namespace: jenkins # where agents are launched
  nodeSelector:
    role: ci-cd
  websocket: true # (websocket and directConnection are mutually exclusive)
  directConnection: false #  (websocket and directConnection are mutually exclusive)
  additionalContainers:
    - sideContainerName: "kaniko"
      image:
        repository: "gcr.io/kaniko-project/executor:debug" # debug release required for tty
        tag: "v1.23.1-debug"
      command: "sleep"
      args: "9999999"
      privileged: false
#      mounts:
#        - mountPath: "/django"
#          name: django-app
  volumes:
    - type: PVC # @deprecated Use {@link GenericEphemeralVolume} instead. Implements a dynamic PVC volume, that is created before the agent pod is created, and terminated afterwards.
      claimName: django-pvc
      mountPath: /django
      readOnly: false
  podRetention: "Always" # Always, Never, OnFailure # Controls how agent pods are retained after the Jenkins build completes `Always` for testing out kaniko container and PVC creation

#  envVars:
#    - name: AWS_DEFAULT_REGION
#      value: "us-east-1"
#    - name: ECR_URL
#      value: "350206045032.dkr.ecr.us-east-1.amazonaws.com/django-production"

# Direct Connection mode agents will not be able to reconnect to a restarted controller if a Random 'TCP port for inbound agents' is configured!

#rbac:
#  create: true
#  readSecrets: false # -- Whether the Jenkins service account should be able to read Kubernetes secrets

serviceAccount:
  create: true
  name: jenkins
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::350206045032:role/JenkinsRole"

#serviceAccountAgent:
#  create: true
#  name: jenkins
#  annotations:
#    eks.amazonaws.com/role-arn: "arn:aws:iam::350206045032:role/JenkinsRole"