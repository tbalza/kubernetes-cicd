controller:
  probes:
    startupProbe:
      failureThreshold: 12 # -- Set the failure threshold for the startup probe
      periodSeconds: 10 # -- Set the time interval between two startup probes executions in seconds
      timeoutSeconds: 60 # -- Set the timeout for the startup probe in seconds
#  sidecars:
#    configAutoReload:
#      enabled: true
#  containerEnv:
#    - name: CASC_JENKINS_CONFIG
#      value: "/var/jenkins_home/"
  image:
    repository: "jenkins/jenkins"
    tag: 2.440.3
  javaOpts: "-Xmx1536m -Xms512m -Dcasc.jenkins.config=/var/jenkins_home/casc_configs" # -Dcasc.jenkins.config=/var/jenkins_home/casc_configs prevent memory limit issues, define jcasc config path
  admin:
    username: "admin" # check
    password: "pass" # check
  serviceType: "ClusterIP"
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1"
      memory: "2Gi"
  service:
    port: 8080
  installPlugins:
    - kubernetes:4203.v1dd44f5b_1cf9
    - workflow-aggregator:596.v8c21c963d92d
    - git:5.2.1
    - configuration-as-code:1775.v810dc950b_514
    - ansible:307.va_1f3ef06575a_
    - docker-workflow:580.vc0c340686b_54
    - credentials:1337.v60b_d7b_c7b_c9f
    - job-dsl:1.87
    - amazon-ecr:1.114.vfd22430621f5
  JCasC:
    enabled: true
    defaultConfig: true # check. false fails install
    overwriteConfiguration: false # requires pod restart (or sidecars: configAutoReload: )
#    configScripts:
#      welcome-message: |
#        jenkins:
#          systemMessage: values.yaml custom message.

    #configScripts: {}  # To be populated by patch
#  customInitContainers:
#    - name: copy-casc-config
#      image: "alpine:3"
#      imagePullPolicy: Always
#      command: ['sh', '-c']
#      args:
#        - |
#          # Copy the configuration file from the mounted ConfigMap to the desired location
#          cp /mnt/casc-config/casc-config.yaml /var/jenkins_home/casc_configs/casc-config.yaml
#      volumeMounts:
#        - name: casc-config-temp
#          mountPath: /mnt/casc-config
#        - name: casc-config
#          mountPath: /var/jenkins_home/casc_configs
  persistence:
    enabled: true #
    #existingClaim: jenkins
    # https://github.com/jenkinsci/helm-charts/issues/659
    # https://github.com/jenkinsci/helm-charts/issues/64
    storageClass: "gp3" # check # ebs-gp3
    size: "9Gi" # check (not applying)
    accessMode: "ReadWriteOnce" # check. # "ReadWriteOnce"
#    volumes:
#      - name: jenkins-home
#        persistentVolumeClaim:
#    mounts:
#      - mountPath: /var/jenkins_home
#        name: jenkins-home
  ingress:
    enabled: true
    className: "alb"
    annotations:
      kubernetes.io/ingress.class: "alb"
      alb.ingress.kubernetes.io/scheme: "internet-facing"
      alb.ingress.kubernetes.io/target-type: "ip"
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 8080}]'
      alb.ingress.kubernetes.io/group.name: "argo-cd-cluster"
      alb.ingress.kubernetes.io/group.order: "2"
      alb.ingress.kubernetes.io/healthcheck-path: "/login"
      alb.ingress.kubernetes.io/healthcheck-port: "traffic-port"
      alb.ingress.kubernetes.io/success-codes: "200,302"
    paths:
      - path: "/*"
        pathType: ImplementationSpecific
        backend:
          service:
            name: "jenkins"
            port:
              number: 8080
  nodeSelector:
    role: ci-cd

agent:
  nodeSelector:
    role: ci-cd

serviceAccount:
  create: true
  name: jenkins
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::350206045032:role/JenkinsRole"
